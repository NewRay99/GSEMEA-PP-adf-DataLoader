parameters:
- name: Stage
- name: subscriptionIdDev
- name: azureSubscriptionSPN
- name: resourceGroupName
#- name: parameterFile
- name: environment
- name: workingDir
- name: dataFactoryName
- name: location
- name: DataFactoryResourceId
jobs:
  - job:
    displayName: Deploy${{ parameters.Stage }}
    steps:
    # configuring node
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'
    - task: Npm@1
      inputs:
        command: 'install'
        verbose: true
        workingDir: '${{parameters.workingDir}}'
      displayName: 'Install npm package'
    # validating artifacts
    - task: Npm@1
      inputs:
        command: 'custom'
        customCommand: "run build validate ${{parameters.workingDir}} ${{parameters.DataFactoryResourceId}}"
        workingDir: '${{parameters.workingDir}}'
      displayName: 'Validate'
    # generating ARM Templates from source code
    - task: Npm@1
      inputs:
        command: 'custom'
        customCommand: 'run build export ${{parameters.workingDir}} ${{parameters.DataFactoryResourceId}} artifacts'
        workingDir: '${{parameters.workingDir}}'
      displayName: 'Generate ARM template'
    - task: CopyFiles@2
      inputs:
        SourceFolder: '${{parameters.workingDir}}/artifacts'
        Contents: '**'
        TargetFolder: '$(build.artifactstagingdirectory)/application' 
      displayName: 'Copying application artifact'
    
    - task: CopyFiles@2
      inputs:
        SourceFolder: '${{parameters.workingDir}}'
        Contents: 'arm-template-parameters*[prod|test|uat|preprod].json'
        TargetFolder: '$(build.artifactstagingdirectory)/application' 
      displayName: 'Copying Environment Parameters'
      
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.Repository.LocalPath)/cicd-scripts'
        Contents: '*'
        TargetFolder: '$(Build.BinariesDirectory)/cicd-scripts' 
      displayName: 'Copying cicd-scripts'

    - task: CopyFiles@2
      displayName: 'Copy config File to: $(build.artifactstagingdirectory)'
      inputs:
        SourceFolder: '$(Build.Repository.LocalPath)'
        TargetFolder: '$(build.artifactstagingdirectory)'
        Contents: 'config.json'
    # building bicep into ARM
    - task: AzureCLI@2  
      displayName: 'Build bicep artifact' 
      inputs: 
        azureSubscription: ${{parameters.azureSubscriptionSPN}}
        scriptType: 'pscore'  
        scriptLocation: 'inlineScript'  
        inlineScript: |
          $file = "$(Build.SourcesDirectory)/azuredatafactory/iac/main.bicep"            
          New-Item -ItemType Directory -Force -Path $(build.artifactstagingdirectory)/infrastructure
          az bicep build --file $file --outdir $(build.artifactstagingdirectory)/infrastructure
    # Override ARM ADF Parameters
    - task: AzurePowerShell@5
      displayName: 'Override ARM ADF Parameters' 
      inputs: 
        azureSubscription: ${{parameters.azureSubscriptionSPN}}
        scriptType: 'InlineScript' 
        inline: |
                $templatejson = '$(build.artifactstagingdirectory)/application/ARMTemplateParametersForFactory.json'
                
                $inputjson = '$(build.artifactstagingdirectory)/application/arm-template-parameters-{env}.json'
                $outputjson = '$(build.artifactstagingdirectory)/application/arm-parameters-{env}.json'

                $loopparams = 'devtest','test','uat' , 'prod'

                
                foreach ($env in $loopparams)
                {
                    
                    $newinputjson = $inputjson -replace '{env}' ,$env
                    $newoutputjson = $outputjson -replace '{env}' ,$env
                    write-host($newoutputjson)

                    if (Test-Path -Path $newinputjson -PathType Leaf)
                    {
                        $overrideobject = Get-Content -Path $newinputjson | ConvertFrom-Json
                        $newobject = Get-Content -Path $templatejson | ConvertFrom-Json
                        
                        if (Test-Path -Path $newoutputjson -PathType Leaf)
                        {
                            remove-Item $newoutputjson
                        }
                        
                        ($overrideobject.parameters) | Get-Member -MemberType NoteProperty | foreach-object { 
                                $key = $_.Name
                                
                               
                                if ($newobject.parameters | Get-Member -MemberType NoteProperty |Where-Object name -eq $key)
                                {
                                    write-host("A $key value matches template file. continue to override") -ForegroundColor white -BackgroundColor green

                                    $getType = $overrideobject.parameters.$key.value.GetType().name 

                                    #check type of json value: we currently only support string and object (nested) values
                                    if($getType -eq "string")
                                    {
                                        write-host("$key value is a type: $getType") -ForegroundColor red -BackgroundColor white
                                        $value = $overrideobject.parameters."$key".value -replace '{env}' ,$env -replace '{subscriptionid}' , '${{parameters.subscriptionIdDev}}'
                                        #[PSCustomObject]@{Key = $key; Value = $value}
                                        $newobject.parameters.$key.value = $value
                                    }
                                    elseif($getType -eq "PSCustomObject")
                                    {
                                        write-host("$key value is a type: $getType") -ForegroundColor red -BackgroundColor white
                                        $overrideobject.parameters."$key".value | Get-Member -MemberType NoteProperty | Select-Object -First 1 | foreach { $key2 = $_.name }
                                   
                                        $key2 = $key2  -replace '{env}' ,$env -replace '{subscriptionid}' , '${{parameters.subscriptionIdDev}}'
                                        #write-host("Leaf: $key2 for $key value is a type: $getType") -ForegroundColor blue -BackgroundColor white
                                    
                                        $array = @{}

                                        #[PSCustomObject]@{Key = $key; Value = $value}
                                        $obj=[PSCustomObject]@{$key2 = @{}}
                                        $newobject.parameters.$key.value = $obj
                                    }
                                }
                                else{
                                    write-host("This $key value does NOT exist in the template file! skipping this Key") -ForegroundColor red -BackgroundColor black
                                }

                                
                        }
                        New-Item $newoutputjson
                        $newobject | ConvertTo-Json -Depth 10| set-content $newoutputjson
                    }
                }
        azurePowerShellVersion: latestVersion
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(build.artifactstagingdirectory)'
        artifact: 'datafactory'
        publishLocation: 'pipeline'